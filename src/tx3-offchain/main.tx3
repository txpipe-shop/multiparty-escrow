asset Agix = 0x921e27e15e2552a40515564ba10a26ecb1fe1a34ac6ccb58c1ce1320."AGIX";

party Script;
party Sender;
party Receiver;
party User;
party StakingAddress;

type ChannelInfo {
    channel_id: Bytes,
    nonce: Int,
    signer: Bytes,
    receiver: Bytes,
    group_id: Bytes,
    expirationDate: Int,
}

tx open(
    initialDeposit: Int,
    channelId: Bytes,
    groupId: Bytes,
    date: Int,
    inputRef: UtxoRef,
    policyId: Bytes,
    tokenName: Bytes,
    signerPubkey: Bytes,
    receiverInput: Bytes,
    since: Int,
    until: Int,
) {
    reference validator {
        ref: 0x82af870a1773a793127f34d55634fa6ad774988b301e4f8e1df04ca2724b98d8#0,
    }

    input source {
        from: Sender,
        ref: inputRef,
    }

    mint {
        amount: AnyAsset(policyId, tokenName, 1),
        redeemer: (),
    }

    output target {
        to: Script,
        amount: Agix(initialDeposit) + Ada(5000000) + AnyAsset(policyId, tokenName, 1),
        datum: ChannelInfo {
            channel_id: channelId,
            nonce: 0,
            signer: signerPubkey,
            receiver: receiverInput,
            group_id: groupId,
            expirationDate: date,
        },
    }

    output {
        to: Sender,
        amount: source - Agix(initialDeposit) - fees - Ada(5000000),
    }

    collateral {
        ref: collateralRef,
    }

    validity {
        until_slot: until,
        since_slot: since,
    }
}

tx close(
    channelUtxo: UtxoRef,
    policyId: Bytes,
    tokenName: Bytes,
    since: Int,
    until: Int,
    validatorRef: UtxoRef,
    collateralRef: UtxoRef,
) {
    reference validator {
        ref: validatorRef,
    }

    input target {
        from: Script,
        ref: channelUtxo,
        redeemer: Action::Close {},
    }

    mint {
        amount: AnyAsset(policyId, tokenName, -1),
        redeemer: (),
    }

    output {
        to: Sender,
        amount: target - fees - AnyAsset(policyId, tokenName, 1),
    }

    validity {
        until_slot: until,
        since_slot: since,
    }

    collateral {
        ref: collateralRef,
    }

    signers {
        Sender,
    }
}

tx update(
    channelUtxo: UtxoRef,
    inputRef: UtxoRef,
    addDeposit: Int,
    extendDate: Int,
    signer: Bytes,
    since: Int,
    until: Int,
    validatorRef: UtxoRef,
    collateralRef: UtxoRef,
) {
    reference validator {
        ref: validatorRef,
    }

    input current {
        from: Script,
        ref: channelUtxo,
        redeemer: Action::Update {},
        datum_is: ChannelInfo,
    }

    input source {
        from: User,
        ref: inputRef,
    }

    output {
        to: Script,
        amount: current + Agix(addDeposit),
        datum: ChannelInfo {
            channel_id: current.channel_id,
            nonce: current.nonce,
            signer: current.signer,
            receiver: current.receiver,
            group_id: current.group_id,
            expirationDate: extendDate,
        },
    }

    output {
        to: User,
        amount: source - Agix(addDeposit) - fees,
    }

    validity {
        until_slot: until,
        since_slot: since,
    }

    collateral {
        ref: collateralRef,
    }

    signers {
        signer,
    }
}

tx claim(
    channelUtxo: UtxoRef,
    amountInput: Int,
    signatureInput: Bytes,
    policyId: Bytes,
    tokenName: Bytes,
    since: Int,
    until: Int,
    validatorRef: UtxoRef,
    collateralRef: UtxoRef,
) {
    reference validator {
        ref: validatorRef,
    }

    input current {
        from: Script,
        ref: channelUtxo,
        redeemer: Action::Claim {
            amount: amountInput,
            signature: signatureInput,
            finalize: true,
        },
        datum_is: ChannelInfo,
    }

    input source {
        from: Receiver,
        min_amount: Ada(5000000),
    }

    mint {
        amount: AnyAsset(policyId, tokenName, -1),
        redeemer: (),
    }

    output {
        to: Sender,
        amount: current - Agix(amountInput) - AnyAsset(policyId, tokenName, 1) ,
    }

    output {
        to: Receiver,
        amount: source + Agix(amountInput) - fees,
    }

    validity {
        until_slot: until,
        since_slot: since,
    }

    collateral {
        ref: collateralRef,
    }

    cardano::withdraw {
        from: StakingAddress,
        amount: 0,
        redeemer: (),
    }

    signers {
        Receiver,
    }
}
